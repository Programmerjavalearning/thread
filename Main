

public class Main {
    public static void main(String[] args) {

        System.out.println("Main thread starting");

        //Construct thread object
        MyThread mt1 = new MyThread("Child #1");
        MyThread mt2 = new MyThread("Child #2");
        MyThread mt3 = new MyThread("Child #3");

        try {
            mt1.thread.join(); // wait until specified thread ends
            System.out.println("Child #1 joined");
            mt2.thread.join();
            System.out.println("Childd #2 joined");
            mt3.thread.join();
            System.out.println("Child #3 joined");
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }


/*        do {
            System.out.println(".");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                System.out.println("Main thread interupted");
                e.printStackTrace();
            }


        }while(mt1.thread.isAlive() || mt2.thread.isAlive() || mt3.thread.isAlive());



        System.out.println("Main thread ending");*/

 /*       for (int i =0 ; i<50; i++){
            System.out.print(".");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                System.out.println("Main thread interupted");
                e.printStackTrace();
            }
        }
        System.out.println("Main thread ending");*/

        //Construct an actual thread from our previous object
       // Thread newThread = new Thread(myThreadOne);
        //newThread.start();

    }
}


class MyThread implements Runnable {

    Thread thread;

    String myThread;

    public MyThread(String myThread) {
        thread = new Thread(this, myThread);
        thread.start();
        this.myThread = myThread;
    }

    @Override
    public void run() {
        System.out.println(myThread + "Starting");
        for (int count = 0; count < 10; count++){
            try {
                Thread.sleep(400);
                System.out.println("In " + myThread + "count is " +
                        count);
            } catch (InterruptedException e) {
                System.out.println(myThread + "interrupted");
                e.printStackTrace();
            }
            System.out.println(myThread + "terminated");
        }

    }
}
